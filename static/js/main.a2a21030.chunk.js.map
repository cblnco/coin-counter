{"version":3,"sources":["components/header/logo.svg","components/header/Header.jsx","components/coin/Coin.svg","utils/soundBoard.js","components/coin/Coin.jsx","components/coinsLabel/CoinsLabel.jsx","components/mysteryBlock/ActiveBlock.svg","components/mysteryBlock/InactiveBlock.svg","components/mysteryBlock/MysteryBlock.jsx","components/button/Button.jsx","components/counter/Counter.jsx","utils/regex.js","utils/constants.js","components/numberField/NumberField.jsx","components/limitHandler/LimitHandler.jsx","components/MainContainer.jsx","serviceWorker.js","index.jsx"],"names":["Header","title","className","src","logo","alt","soundBoard","isSoundEnabled","this","soundSource","Audio","play","playSound","Coin","props","animation","defaultStyle","classNames","cn","playCoin","CoinSVG","CoinsLabel","number","padStart","padStr","id","toString","MysteryBlock","active","playBlockKick","ActiveBlock","InactiveBlock","memo","Button","children","Counter","limit","animationTimeout","useState","counter","setCounter","coinAnimation","setCoinAnimation","isMysteryBlockActive","setIsMysteryBlockActive","mysteryBlockAnimation","setMysteryBlockAnimation","useEffect","setTimeout","onClick","playDecrease","playError","numberRegex","MAX","NumberField","value","onChange","onBlur","onDecrease","onIncrease","LimitHandler","setLimit","e","newLimit","target","test","Number","playIncrease","MainContainer","currentLimit","setCurrentLimit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2a21030.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.927f1d60.svg\";","import React from \"react\";\nimport logo from './logo.svg';\nimport PropTypes from \"prop-types\";\nimport \"./Header.css\";\n\nconst Header = ({ title }) => (\n  <header className=\"App-header\">\n    <img src={logo} className=\"App-logo\" alt=\"React logo\" />\n    <p className=\"App-paragraph\">{title}</p>\n  </header>\n);\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired\n};\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/Coin.ba5d8f5a.svg\";","class SoundFX {\n    #isSoundEnabled;\n    #COIN_FX = \"https://themushroomkingdom.net/sounds/wav/smw/smw_coin.wav\";\n    #ERROR_FX = \"https://themushroomkingdom.net/sounds/wav/smw/smw_lemmy_wendy_incorrect.wav\";\n    #DECREASE_FX = \"https://themushroomkingdom.net/sounds/wav/smw/smw_stomp_bones.wav\";\n    #INCREASE_FX = \"https://themushroomkingdom.net/sounds/wav/smw/smw_stomp.wav\";\n    #BLOCK_KICK_FX = \"https://themushroomkingdom.net/sounds/wav/smw/smw_shell_ricochet.wav\";\n\n    constructor(isSoundEnabled) {\n        this.#isSoundEnabled = isSoundEnabled;\n    }\n\n    set isSoundEnabled(isSoundEnabled) {\n        this.#isSoundEnabled = isSoundEnabled;\n    }\n\n    get isSoundEnabled() {\n        return this.#isSoundEnabled;\n    }\n\n    /**\n     * This method should be private (#), but dealing with CRA and babel\n     * plugins, without ejecting CRA, is not worth the effort for this kind\n     * of project.\n     * \n     * No JSDoc this time... at all Â¯\\_(ãƒ„)_/Â¯\n     */\n    playSound(soundSource) {\n        if (this.#isSoundEnabled) {\n            const sound = new Audio(soundSource);\n            sound.play();\n        }\n    }\n\n    playCoin() {\n        this.playSound(this.#COIN_FX);\n    };\n\n    playError() {\n        this.playSound(this.#ERROR_FX);\n    }\n\n    playDecrease() {\n        this.playSound(this.#DECREASE_FX);\n    }\n\n    playIncrease() {\n        this.playSound(this.#INCREASE_FX);\n    }\n\n    playBlockKick() {\n        this.playSound(this.#BLOCK_KICK_FX);\n    }\n}\n\nconst soundBoard = new SoundFX(true);\n\nexport default soundBoard;","import React from \"react\";\nimport CoinSVG from \"./Coin.svg\";\nimport soundBoard from \"../../utils/soundBoard\";\nimport cn from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport \"./Coin.css\";\n\nconst Coin = props => {\n  const { animation, defaultStyle, alt, className } = props;\n  const classNames = cn(\n    { \"App-Coin-animation\": animation },\n    { \"App-Coin\": defaultStyle },\n    className\n  );\n\n  if (animation) {\n    soundBoard.playCoin();\n  }\n\n  return <img className={classNames} src={CoinSVG} alt={alt} />;\n};\n\nCoin.propTypes = {\n  aniamtion: PropTypes.bool,\n  defaultStyle: PropTypes.bool,\n  className: PropTypes.string\n};\n\nexport default Coin;\n","import React from \"react\";\nimport Coin from \"../coin/Coin\";\nimport PropTypes from \"prop-types\";\nimport \"./CoinsLabel.css\";\n\nconst CoinsLabel = ({ number, padStart, padStr }) => (\n  <div>\n    <Coin id=\"coin_label_svg\" className=\"App-Coin-label\" alt=\"Coin label\" />\n    <span className=\"App-Coin-label-symbol\">&nbsp;ðŸ—™&nbsp;&nbsp;</span>\n    <span className=\"App-Coin-label-text\">\n      {number.toString().padStart(padStart, padStr)}\n    </span>\n  </div>\n);\n\nCoinsLabel.propTypes = {\n  padStr: PropTypes.string,\n  number: PropTypes.number.isRequired,\n  padStart: PropTypes.number.isRequired,\n};\n\nexport default CoinsLabel;\n","export default __webpack_public_path__ + \"static/media/ActiveBlock.1f117f61.svg\";","export default __webpack_public_path__ + \"static/media/InactiveBlock.d68a21e6.svg\";","import React, { memo } from \"react\";\nimport ActiveBlock from \"./ActiveBlock.svg\";\nimport InactiveBlock from \"./InactiveBlock.svg\";\nimport soundBoard from \"../../utils/soundBoard\";\nimport cn from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport \"./MysteryBlock.css\";\n\nconst MysteryBlock = props => {\n  const { id, animation, active, alt } = props;\n  const classNames = cn(\"App-Mistery-Block\", { \"margin-top\": animation });\n\n  if (animation && active) {\n    soundBoard.playBlockKick();\n  }\n\n  return (\n    <img id={id} className={classNames} animation={classNames} src={active ? ActiveBlock : InactiveBlock} alt={alt} />\n  );\n};\n\nMysteryBlock.propTypes = {\n  id: PropTypes.string,\n  alt: PropTypes.string,\n  active: PropTypes.bool.isRequired,\n  animation: PropTypes.bool.isRequired\n};\n\nexport default memo(MysteryBlock);\n","import React from \"react\";\nimport cn from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport \"./Button.css\";\n\nconst Button = props => {\n  const classNames = cn(\"App-button\", props.className);\n  return (\n    <button {...props} className={classNames}>\n      {props.children}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired\n};\n\nexport default Button;\n","import React, { useState, useEffect } from \"react\";\nimport CoinsLabel from \"../coinsLabel/CoinsLabel\";\nimport Coin from \"../coin/Coin.jsx\";\nimport MysteryBlock from \"../mysteryBlock/MysteryBlock\";\nimport soundBoard from \"../../utils/soundBoard\";\nimport Button from \"../button/Button\";\nimport PropTypes from \"prop-types\";\nimport \"./Counter.css\";\n\nconst Counter = ({ limit, animationTimeout }) => {\n  const [counter, setCounter] = useState(0);\n  const [coinAnimation, setCoinAnimation] = useState(false);\n  const [isMysteryBlockActive, setIsMysteryBlockActive] = useState(true);\n  const [mysteryBlockAnimation, setMysteryBlockAnimation] = useState(false);\n\n  // Effect to delay the prop update to set the block active or inactive.\n  useEffect(() => {\n    if (counter > limit) {\n      setCounter(limit);\n    }\n    \n    setTimeout(\n      () => setIsMysteryBlockActive(counter < limit),\n      animationTimeout\n    );\n  }, [counter, animationTimeout, limit]);\n\n  const removeAnimations = () => {\n    setTimeout(\n      () => {\n        setCoinAnimation(false);\n        setMysteryBlockAnimation(false);\n      },\n      animationTimeout\n    );\n  };\n\n  const handleOnIncreaseClick = () => {\n    if (counter < limit) {\n      setCounter(counter + 1);\n      setCoinAnimation(true);\n      setMysteryBlockAnimation(true);\n      removeAnimations();\n    } else {\n      soundBoard.playError();\n      setMysteryBlockAnimation(true);\n      setTimeout(() => {\n        setMysteryBlockAnimation(false);\n      },\n        animationTimeout);\n\n    }\n  };\n\n  const handleOnDecreaseClick = () => {\n    if (counter > 0) {\n      setCounter(counter - 1);\n      soundBoard.playDecrease();\n    } else {\n      soundBoard.playError();\n    }\n  };\n\n  return (\n    <>\n      <div className=\"row\">\n        <CoinsLabel number={counter} padStart={4} padStr=\"0\" />\n      </div>\n      <div className=\"row App-Mystery-Block-row\">\n        <Coin\n          id=\"main_coin\"\n          defaultStyle\n          animation={coinAnimation}\n          alt=\"Coin\"\n        />\n        <MysteryBlock\n          id=\"mystery_block\"\n          active={isMysteryBlockActive}\n          animation={mysteryBlockAnimation}\n          alt=\"Mystery Block\"\n        />\n      </div>\n      <div className=\"row\">\n        <div className=\"col-4\" />\n        <div className=\"col-2\">\n          <Button id=\"decrease_button\" onClick={handleOnDecreaseClick}>\n            Decrease\n          </Button>\n        </div>\n        <div className=\"col-2\">\n          <Button id=\"increase_button\" className=\"increase-button\" onClick={handleOnIncreaseClick}>\n            Increase\n          </Button>\n        </div>\n        <div className=\"col-4\" />\n      </div>\n    </>\n  );\n}\n\nCounter.propTypes = {\n  limit: PropTypes.number.isRequired,\n  animationTimeout: PropTypes.number\n};\n\nexport default Counter;\n","// Numbers only regex.\nexport const numberRegex = /^\\d+$/;","// Counter minimum.\nexport const MIN = 1;\n\n// Counter maximum.\nexport const MAX = 9999;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./NumberField.css\";\n\nconst NumberField = ({ id, value, onChange, onBlur, onDecrease, onIncrease }) => (\n    <div id={id} className=\"number-field\">\n        <button className=\"number-button left\" onClick={onDecrease}>-</button>\n        <input className=\"number-input\" value={value} onChange={onChange} onBlur={onBlur} />\n        <button className=\"number-button right\" onClick={onIncrease}>+</button>\n    </div>\n);\n\nNumberField.propTypes = {\n    id: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    value: PropTypes.number.isRequired,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    onDecrease: PropTypes.func,\n    onIncrease: PropTypes.func\n};\n\nexport default NumberField;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { numberRegex } from \"../../utils/regex\";\nimport { MIN, MAX } from \"../../utils/constants\";\nimport soundBoard from \"../../utils/soundBoard\";\nimport NumberField from \"../numberField/NumberField\";\nimport \"./LimitHandler.css\";\n\nconst LimitHandler = ({ id, limit, setLimit }) => {\n\n    const onNumberFieldChange = e => {\n        const newLimit = e.target.value;\n        setLimit(numberRegex.test(newLimit) ? newLimit : 0);\n    }\n\n    const onNumberFieldBlur = () => {\n        let newLimit = limit;\n\n        if (newLimit && numberRegex.test(newLimit)) {\n            if (newLimit < MIN) {\n                newLimit = MIN;\n            }\n            else if (newLimit > MAX) {\n                newLimit = MAX;\n            }\n            else {\n                newLimit = Number(newLimit);\n            }\n        }\n        else {\n            newLimit = MIN;\n        }\n\n        setLimit(newLimit);\n    }\n\n    const onDecreaseClick = () => {\n        if (limit > MIN) {\n            setLimit(limit - 1);\n            soundBoard.playDecrease();\n        }\n        else {\n            soundBoard.playError();\n        }\n    }\n\n    const onIncreaseClick = () => {\n        if (limit < MAX) {\n            setLimit(limit + 1);\n            soundBoard.playIncrease();\n        }\n        else {\n            soundBoard.playError();\n        }\n    }\n\n    return (\n        <div id={id} className=\"limit-container\">\n            <div className=\"limit-sentence\">Current limit:</div>\n            <NumberField\n                id=\"number_field\" value={limit}\n                onChange={onNumberFieldChange} onBlur={onNumberFieldBlur}\n                onDecrease={onDecreaseClick} onIncrease={onIncreaseClick}\n            />\n        </div>\n    )\n};\n\nLimitHandler.propTypes = {\n    id: PropTypes.string,\n    limit: PropTypes.number.isRequired,\n    setLimit: PropTypes.func.isRequired\n};\n\nexport default LimitHandler;\n","import React, { useState } from \"react\";\nimport Header from \"../components/header/Header\";\nimport Counter from \"../components/counter/Counter\";\nimport LimitHandler from \"../components/limitHandler/LimitHandler\";\nimport \"../grid/simple-grid.min.css\";\nimport \"./MainContainer.css\";\n\nconst MainContainer = () => {\n  const [currentLimit, setCurrentLimit] = useState(20);\n\n  return (\n    <div className=\"App container\">\n      <div className=\"row\">\n        <Header title=\"React Coin Counter\" />\n        <LimitHandler id=\"limit_handler\" limit={Number(currentLimit)} setLimit={setCurrentLimit} />\n      </div>\n      <div className=\"row\">\n        <Counter limit={Number(currentLimit)} animationTimeout={230} />\n      </div>\n    </div>\n  )\n};\n\nexport default MainContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainContainer from './components/MainContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MainContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}